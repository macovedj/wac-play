// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub type Person = dannyjaf:people_maker_people::Person;
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "foo"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_foo() -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let result0 = <_GuestImpl as Guest>::foo();
    let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
    let dannyjaf:people_maker_people::Person{ name:name2, age:age2, } = result0;
    let vec3 = (name2.into_bytes()).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr1 + 4) as *mut i32) = len3;
    *((ptr1 + 0) as *mut i32) = ptr3;
    *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::as_i32(age2);
    ptr1
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_foo"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_foo(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
    }
  };
};
use super::Component as _GuestImpl;
pub trait Guest {
  /// export age-sort: func(input: list<person>) -> list<person>;
  /// export name-sort: func(input: list<person>) -> list<person>;
  /// import people;
  /// import sort;
  /// use sort.{person};
  fn foo() -> Person;
}

#[allow(unused_imports)]
use wit_bindgen::rt::{alloc, vec::Vec, string::String};

#[repr(align(4))]
struct _RetArea([u8; 12]);
static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
pub mod component {
  pub mod people_maker {
    
    #[allow(clippy::all)]
    pub mod people {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[derive(Clone)]
      pub struct Person {
        pub name: wit_bindgen::rt::string::String,
        pub age: u32,
      }
      impl ::core::fmt::Debug for Person {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Person").field("name", &self.name).field("age", &self.age).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn new_person(name: &str,age: u32,) -> Person{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let vec0 = name;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:people-maker/people")]
          extern "C" {
            #[link_name = "new-person"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0, wit_bindgen::rt::as_i32(age), ptr1);
          let l2 = *((ptr1 + 0) as *const i32);
          let l3 = *((ptr1 + 4) as *const i32);
          let len4 = l3 as usize;
          let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
          let l5 = *((ptr1 + 8) as *const i32);
          Person{
            name: wit_bindgen::rt::string_lift(bytes4),
            age: l5 as u32,
          }
        }
      }
      
    }
    
  }
}

#[allow(clippy::all)]
pub mod dannyjaf_people_maker_people {
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = super::__link_section;
  #[derive(Clone)]
  pub struct Person {
    pub name: wit_bindgen::rt::string::String,
    pub age: u32,
  }
  impl ::core::fmt::Debug for Person {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
      f.debug_struct("Person").field("name", &self.name).field("age", &self.age).finish()
    }
  }
  #[allow(unused_unsafe, clippy::all)]
  pub fn new_person(name: &str,age: u32,) -> Person{
    
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    unsafe {
      
      #[repr(align(4))]
      struct RetArea([u8; 12]);
      let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
      let vec0 = name;
      let ptr0 = vec0.as_ptr() as i32;
      let len0 = vec0.len() as i32;
      let ptr1 = ret_area.as_mut_ptr() as i32;
      #[cfg(target_arch = "wasm32")]
      #[link(wasm_import_module = "dannyjaf:people-maker/people")]
      extern "C" {
        #[link_name = "new-person"]
        fn wit_import(_: i32, _: i32, _: i32, _: i32, );
      }
      
      #[cfg(not(target_arch = "wasm32"))]
      fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
      wit_import(ptr0, len0, wit_bindgen::rt::as_i32(age), ptr1);
      let l2 = *((ptr1 + 0) as *const i32);
      let l3 = *((ptr1 + 4) as *const i32);
      let len4 = l3 as usize;
      let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
      let l5 = *((ptr1 + 8) as *const i32);
      Person{
        name: wit_bindgen::rt::string_lift(bytes4),
        age: l5 as u32,
      }
    }
  }
  
}


#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:example"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 383] = [0, 97, 115, 109, 13, 0, 1, 0, 0, 25, 22, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 4, 0, 7, 130, 2, 1, 65, 2, 1, 65, 8, 1, 66, 4, 1, 114, 2, 4, 110, 97, 109, 101, 115, 3, 97, 103, 101, 121, 4, 0, 6, 112, 101, 114, 115, 111, 110, 3, 0, 0, 1, 64, 2, 4, 110, 97, 109, 101, 115, 3, 97, 103, 101, 121, 0, 1, 4, 0, 10, 110, 101, 119, 45, 112, 101, 114, 115, 111, 110, 1, 2, 3, 1, 29, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 112, 101, 111, 112, 108, 101, 45, 109, 97, 107, 101, 114, 47, 112, 101, 111, 112, 108, 101, 5, 0, 2, 3, 0, 0, 6, 112, 101, 114, 115, 111, 110, 3, 0, 6, 112, 101, 114, 115, 111, 110, 3, 0, 1, 1, 66, 4, 1, 114, 2, 4, 110, 97, 109, 101, 115, 3, 97, 103, 101, 121, 4, 0, 6, 112, 101, 114, 115, 111, 110, 3, 0, 0, 1, 64, 2, 4, 110, 97, 109, 101, 115, 3, 97, 103, 101, 121, 0, 1, 4, 0, 10, 110, 101, 119, 45, 112, 101, 114, 115, 111, 110, 1, 2, 3, 1, 28, 100, 97, 110, 110, 121, 106, 97, 102, 58, 112, 101, 111, 112, 108, 101, 45, 109, 97, 107, 101, 114, 47, 112, 101, 111, 112, 108, 101, 5, 3, 1, 64, 0, 0, 2, 4, 0, 3, 102, 111, 111, 1, 4, 4, 1, 24, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 115, 111, 114, 116, 101, 114, 47, 101, 120, 97, 109, 112, 108, 101, 4, 0, 11, 13, 1, 0, 7, 101, 120, 97, 109, 112, 108, 101, 3, 0, 0, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 50, 48, 46, 49, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
